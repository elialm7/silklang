// this is the grammar we are using for the parser
// we are going to use the recursive descent method, which is a top-down parser.

program → statement* EOF ;
declaration → varDecl | statement ;
statement → exprStmt | printStmt ;
exprStmt → expression ";" ;
printStmt → "print" expression ";" ;

expression → equality ;
equality → comparison ( ( "!=" | "==" ) comparison )* ;
comparison → term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
term → factor ( ( "-" | "+" ) factor )* ;
factor → unary ( ( "/" | "*" ) unary )* ;
unary → ( "!" | "-" ) unary | primary ;
primary → NUMBER | STRING | "true" | "false" | "nil" | "(" expression ")" ;


//this is rougly translation.
// grammar notation         Code representation
    Terminal                Code to match and consume a token
    Nonterminal             Call to that rule's function
    |                       if or switch statement
    * or +                  whiole or for loop
    ?                       if statement
