// this is the grammar we are using for the parser
// we are going to use the recursive descent method, which is a top-down parser.

program → statement* EOF ;
declaration → varDecl | statement | fundec | classdec;
classdec -> "class" IDENTIFIER ("<" IDENTIFIER)? "{" function* "}";
fundec-> "fun" function;
function-> IDENTIFIER "(" parameters? ")" block;
parameters -> IDENTIFIER ("," IDENTIFIER)*;
varDecl → "var" IDENTIFIER ( "=" expression )? ";" ;
statement → exprStmt | printStmt  | block | ifStmt | whileStmt | forStmt | breakStmt | continueStmt | returnStmt;
returntStmt -> "return" expression?";";
breakStmt-> "break" ;
continueStmt -> "continue" ;
ifStm -> "if" "(" expression ")" statement ("else" statement)? ;
whileStmt -> "while" "(" expression ")" statement;
forStmt -> "for" "(" ( varDecl | exprStmt | ";" ) expression? ";" expression? ")" statement ;
block → "{" declaration* "}" ;
exprStmt → expression ";" ;
printStmt → "print" expression ";" ;

expression → assignment ;
assignment → (call "." )? IDENTIFIER "=" assignment | logic_or ;
logic_or -> logic_and ( "or" logic_and )*;
logic_and -> equality ("and" equality)*;
equality → comparison ( ( "!=" | "==" ) comparison )* ;
comparison → term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
term → factor ( ( "-" | "+" ) factor )* ;
factor → unary ( ( "/" | "*" | "%") unary )* ;
unary → ( "!" | "-" ) unary | call  ;
call -> primary ( "(" arguments? ")" | "." IDENTIFIER)*;
arguments -> expression ("," expression)*;
primary → NUMBER | STRING | "true" | "false" | "nil" | "(" expression ")" | IDENTIFIER | "__input" | "this" | "suepr" "." IDENTIFIER;

NUMBER         → DIGIT+ ( "." DIGIT+ )? ;
STRING         → "\"" <any char except "\"">* "\"" ;
IDENTIFIER     → ALPHA ( ALPHA | DIGIT )* ;
ALPHA          → "a" ... "z" | "A" ... "Z" | "_" ;
DIGIT          → "0" ... "9" ;

//this is rougly translation.
// grammar notation         Code representation
    Terminal                Code to match and consume a token
    Nonterminal             Call to that rule's function
    |                       if or switch statement
    * or +                  whiole or for loop
    ?                       if statement
